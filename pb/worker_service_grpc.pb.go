// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: worker_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlServiceClient is the client API for CrawlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlServiceClient interface {
	Process(ctx context.Context, in *SerializedRequest, opts ...grpc.CallOption) (*SerializedParserResult, error)
}

type crawlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlServiceClient(cc grpc.ClientConnInterface) CrawlServiceClient {
	return &crawlServiceClient{cc}
}

func (c *crawlServiceClient) Process(ctx context.Context, in *SerializedRequest, opts ...grpc.CallOption) (*SerializedParserResult, error) {
	out := new(SerializedParserResult)
	err := c.cc.Invoke(ctx, "/crawler.distributed.worker.CrawlService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlServiceServer is the server API for CrawlService service.
// All implementations must embed UnimplementedCrawlServiceServer
// for forward compatibility
type CrawlServiceServer interface {
	Process(context.Context, *SerializedRequest) (*SerializedParserResult, error)
	mustEmbedUnimplementedCrawlServiceServer()
}

// UnimplementedCrawlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlServiceServer struct {
}

func (UnimplementedCrawlServiceServer) Process(context.Context, *SerializedRequest) (*SerializedParserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedCrawlServiceServer) mustEmbedUnimplementedCrawlServiceServer() {}

// UnsafeCrawlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlServiceServer will
// result in compilation errors.
type UnsafeCrawlServiceServer interface {
	mustEmbedUnimplementedCrawlServiceServer()
}

func RegisterCrawlServiceServer(s grpc.ServiceRegistrar, srv CrawlServiceServer) {
	s.RegisterService(&CrawlService_ServiceDesc, srv)
}

func _CrawlService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerializedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.distributed.worker.CrawlService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).Process(ctx, req.(*SerializedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrawlService_ServiceDesc is the grpc.ServiceDesc for CrawlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.distributed.worker.CrawlService",
	HandlerType: (*CrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _CrawlService_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker_service.proto",
}
